<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Wed Jan 08 17:06:31 2020
<BR><P>
<H3>Maximum Stack Usage =        544 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; HiLinkMcuMain &rArr; HiLinkMainProcess &rArr; HiSlipRcvData &rArr; HiLinkGeneralCmdSend &rArr; HiLinkNotifyErrorInfo &rArr; USART1_DEBUG &rArr; __c89vsnprintf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2d]">ADC0_1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d]">ADC0_1_IRQHandler</a><BR>
 <LI><a href="#[15]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">BusFault_Handler</a><BR>
 <LI><a href="#[13]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">HardFault_Handler</a><BR>
 <LI><a href="#[14]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">MemManage_Handler</a><BR>
 <LI><a href="#[16]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2d]">ADC0_1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[4a]">ADC2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1]">BrightnessBrightnessCtrlFunc</a> from hilink_device.o(i.BrightnessBrightnessCtrlFunc) referenced 2 times from hilink_device.o(.data)
 <LI><a href="#[15]">BusFault_Handler</a> from gd32f30x_it.o(i.BusFault_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[31]">CAN0_EWMC_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[30]">CAN0_RX1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[4]">CommonExecution1ActionCtrlFunc</a> from hilink_device.o(i.CommonExecution1ActionCtrlFunc) referenced 2 times from hilink_device.o(.data)
 <LI><a href="#[26]">DMA0_Channel0_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[27]">DMA0_Channel1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[28]">DMA0_Channel2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[29]">DMA0_Channel3_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2a]">DMA0_Channel4_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2b]">DMA0_Channel5_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2c]">DMA0_Channel6_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[53]">DMA1_Channel0_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[54]">DMA1_Channel1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[55]">DMA1_Channel2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[56]">DMA1_Channel3_4_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[18]">DebugMon_Handler</a> from gd32f30x_it.o(i.DebugMon_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[4b]">EXMC_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[21]">EXTI0_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[43]">EXTI10_15_IRQHandler</a> from key.o(i.EXTI10_15_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[22]">EXTI1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[23]">EXTI2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[24]">EXTI3_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[25]">EXTI4_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[32]">EXTI5_9_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1f]">FMC_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3]">FadeTimeTimeCtrlFunc</a> from hilink_device.o(i.FadeTimeTimeCtrlFunc) referenced 2 times from hilink_device.o(.data)
 <LI><a href="#[13]">HardFault_Handler</a> from gd32f30x_it.o(i.HardFault_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[5d]">HiLinkAckProcess</a> from hilink_process.o(i.HiLinkAckProcess) referenced from hilink_hislip.o(i.HiSlipInit)
 <LI><a href="#[5c]">HiLinkCmdProcess</a> from hilink_process.o(i.HiLinkCmdProcess) referenced from hilink_hislip.o(i.HiSlipInit)
 <LI><a href="#[6]">HiLinkCommonWaitAck</a> from hilink_process.o(i.HiLinkCommonWaitAck) referenced 26 times from hilink_process.o(.data)
 <LI><a href="#[f]">HiLinkReportInitVals</a> from hilink_process.o(i.HiLinkReportInitVals) referenced 2 times from hilink_process.o(.data)
 <LI><a href="#[10]">HiLinkReportProfileVals</a> from hilink_process.o(i.HiLinkReportProfileVals) referenced 2 times from hilink_process.o(.data)
 <LI><a href="#[7]">HiLinkReqGetNetStatus</a> from hilink_process.o(i.HiLinkReqGetNetStatus) referenced 6 times from hilink_process.o(.data)
 <LI><a href="#[5]">HiLinkReqGetWorkMode</a> from hilink_process.o(i.HiLinkReqGetWorkMode) referenced 2 times from hilink_process.o(.data)
 <LI><a href="#[9]">HiLinkReqRegAcBi</a> from hilink_process.o(i.HiLinkReqRegAcBi) referenced 2 times from hilink_process.o(.data)
 <LI><a href="#[a]">HiLinkReqRegDevInfo</a> from hilink_process.o(i.HiLinkReqRegDevInfo) referenced 2 times from hilink_process.o(.data)
 <LI><a href="#[d]">HiLinkReqRegEnd</a> from hilink_process.o(i.HiLinkReqRegEnd) referenced 2 times from hilink_process.o(.data)
 <LI><a href="#[c]">HiLinkReqRegKeyMap</a> from hilink_process.o(i.HiLinkReqRegKeyMap) referenced 2 times from hilink_process.o(.data)
 <LI><a href="#[8]">HiLinkReqRegStart</a> from hilink_process.o(i.HiLinkReqRegStart) referenced 2 times from hilink_process.o(.data)
 <LI><a href="#[b]">HiLinkReqRegSvcInfo</a> from hilink_process.o(i.HiLinkReqRegSvcInfo) referenced 2 times from hilink_process.o(.data)
 <LI><a href="#[e]">HiLinkSetWorkMode</a> from hilink_process.o(i.HiLinkSetWorkMode) referenced 2 times from hilink_process.o(.data)
 <LI><a href="#[5b]">HiSlipIoRcvData</a> from hilink_hislip.o(i.HiSlipIoRcvData) referenced from hilink_hislip.o(i.HiSlipInit)
 <LI><a href="#[5a]">HiSlipIoSendData</a> from hilink_hislip.o(i.HiSlipIoSendData) referenced from hilink_hislip.o(i.HiSlipInit)
 <LI><a href="#[3b]">I2C0_ER_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3a]">I2C0_EV_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3d]">I2C1_ER_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3c]">I2C1_EV_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1c]">LVD_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[14]">MemManage_Handler</a> from gd32f30x_it.o(i.MemManage_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[12]">NMI_Handler</a> from gd32f30x_it.o(i.NMI_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[19]">PendSV_Handler</a> from gd32f30x_it.o(i.PendSV_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[20]">RCU_CTC_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[44]">RTC_Alarm_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1e]">RTC_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[11]">Reset_Handler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[4c]">SDIO_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3e]">SPI0_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3f]">SPI1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[4e]">SPI2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[17]">SVC_Handler</a> from gd32f30x_it.o(i.SVC_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[0]">SwitchOnCtrlFunc</a> from hilink_device.o(i.SwitchOnCtrlFunc) referenced 2 times from hilink_device.o(.data)
 <LI><a href="#[1a]">SysTick_Handler</a> from gd32f30x_it.o(i.SysTick_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[58]">SystemInit</a> from system_gd32f30x.o(i.SystemInit) referenced from startup_gd32f30x_hd.o(.text)
 <LI><a href="#[1d]">TAMPER_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[33]">TIMER0_BRK_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[36]">TIMER0_Channel_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[35]">TIMER0_TRG_CMT_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[34]">TIMER0_UP_IRQHandler</a> from timer.o(i.TIMER0_UP_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[37]">TIMER1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[38]">TIMER2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[39]">TIMER3_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[4d]">TIMER4_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[51]">TIMER5_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[52]">TIMER6_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[46]">TIMER7_BRK_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[49]">TIMER7_Channel_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[48]">TIMER7_TRG_CMT_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[47]">TIMER7_UP_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[4f]">UART3_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[50]">UART4_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[40]">USART0_IRQHandler</a> from uart.o(i.USART0_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[41]">USART1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[42]">USART2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2e]">USBD_HP_CAN0_TX_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2f]">USBD_LP_CAN0_RX0_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[45]">USBD_WKUP_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[16]">UsageFault_Handler</a> from gd32f30x_it.o(i.UsageFault_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1b]">WWDGT_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2]">WakeupTimeTimeCtrlFunc</a> from hilink_device.o(i.WakeupTimeTimeCtrlFunc) referenced 2 times from hilink_device.o(.data)
 <LI><a href="#[59]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_gd32f30x_hd.o(.text)
 <LI><a href="#[5f]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[5e]">fputc</a> from main.o(i.fputc) referenced from printfb.o(i.__0printf$bare)
 <LI><a href="#[57]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[59]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(.text)
</UL>
<P><STRONG><a name="[ce]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[60]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[71]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[cf]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[d0]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[d1]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[d2]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[d3]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[11]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>ADC0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>ADC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>CAN0_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CAN0_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA0_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA0_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA0_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA0_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA0_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA0_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA0_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA1_Channel3_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>EXMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI5_9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>RCU_CTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIMER0_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIMER0_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIMER0_TRG_CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIMER5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIMER6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIMER7_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIMER7_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIMER7_TRG_CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIMER7_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>USBD_HP_CAN0_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USBD_LP_CAN0_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>USBD_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[d4]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[96]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkMainProcess
</UL>

<P><STRONG><a name="[d6]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[91]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_DEBUG
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkReqRegSvcInfo
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkReqRegStart
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkReqRegKeyMap
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkReqRegDevInfo
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkReqRegAcBi
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkFillSvcTlvs
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkUpdateKeyVal
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkUpdateOneKeyVal
</UL>

<P><STRONG><a name="[d7]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[65]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d8]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6c]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[6e]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6f]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[70]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b3]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[61]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[d9]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[da]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[db]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[dc]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[6a]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[dd]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>BrightnessBrightnessCtrlFunc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hilink_device.o(i.BrightnessBrightnessCtrlFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = BrightnessBrightnessCtrlFunc &rArr; USART1_DEBUG &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_DEBUG
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hilink_device.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f30x_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>CommonExecution1ActionCtrlFunc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hilink_device.o(i.CommonExecution1ActionCtrlFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = CommonExecution1ActionCtrlFunc &rArr; USART1_DEBUG &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_DEBUG
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hilink_device.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f30x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>EXTI10_15_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, key.o(i.EXTI10_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI10_15_IRQHandler &rArr; gd_eval_led_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_get
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_led_toggle
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>FadeTimeTimeCtrlFunc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hilink_device.o(i.FadeTimeTimeCtrlFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = FadeTimeTimeCtrlFunc &rArr; USART1_DEBUG &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_DEBUG
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hilink_device.o(.data)
</UL>
<P><STRONG><a name="[93]"></a>Get_tick</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f30x_it.o(i.Get_tick))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkGetSysCurTime
</UL>

<P><STRONG><a name="[13]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f30x_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>HiLinkAckProcess</STRONG> (Thumb, 352 bytes, Stack size 48 bytes, hilink_process.o(i.HiLinkAckProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = HiLinkAckProcess &rArr; HiLinkUpdateWorkMode &rArr; HiLinkNotifyErrorInfo &rArr; USART1_DEBUG &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkParseModuleInfo
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkFreeModuleInfo
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiSlipParseDataEA
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkNotifyUtcTime
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkNotifyModuleInfo
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkUpdateWorkMode
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkUpdateNetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hilink_hislip.o(i.HiSlipInit)
</UL>
<P><STRONG><a name="[5c]"></a>HiLinkCmdProcess</STRONG> (Thumb, 1102 bytes, Stack size 56 bytes, hilink_process.o(i.HiLinkCmdProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = HiLinkCmdProcess &rArr; HiSlipSendAckMsg &rArr; HiLinkGeneralCmdSend &rArr; HiLinkNotifyErrorInfo &rArr; USART1_DEBUG &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkGetProfileInfoList
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkGeneralParseTlv
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkFillSvcTlvs
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkGeneralCmdSend
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiSlipSendAckMsg
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiSlipParseDataEA
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkOtaStart
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkOtaRcvPkg
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkOtaEnd
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkOtaCheckVer
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkNotifyErrorInfo
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkDevRemoved
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkUpdateWorkMode
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkUpdateNetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hilink_hislip.o(i.HiSlipInit)
</UL>
<P><STRONG><a name="[8d]"></a>HiLinkDevInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hilink_process.o(i.HiLinkDevInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = HiLinkDevInit &rArr; HiLinkInitProfileValue &rArr; HiLinkUpdateKeyVal &rArr; HiLinkUpdateOneKeyVal &rArr; HiLinkNotifyErrorInfo &rArr; USART1_DEBUG &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiSlipInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkInitProfileValue
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkMcuMain
</UL>

<P><STRONG><a name="[7f]"></a>HiLinkDevRemoved</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hilink_mcu.o(i.HiLinkDevRemoved))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkCmdProcess
</UL>

<P><STRONG><a name="[89]"></a>HiLinkGeneralCmdSend</STRONG> (Thumb, 280 bytes, Stack size 64 bytes, hilink_process.o(i.HiLinkGeneralCmdSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = HiLinkGeneralCmdSend &rArr; HiLinkNotifyErrorInfo &rArr; USART1_DEBUG &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiSlipSendData
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiSlipFillDataEA
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkNotifyErrorInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkReqRegSvcInfo
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkReqRegStart
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkReqRegKeyMap
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkReqRegEnd
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkReqRegDevInfo
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkReqRegAcBi
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkReqGetWorkMode
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkReqGetNetStatus
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkReportSvcKeyVals
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkReportProfileVals
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkModuleReboot
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkCmdProcess
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiSlipSendAckMsg
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiSlipRcvData
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkSetWorkMode
</UL>

<P><STRONG><a name="[9d]"></a>HiLinkGetDeviceSn</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hilink_mcu.o(i.HiLinkGetDeviceSn))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkReqRegDevInfo
</UL>

<P><STRONG><a name="[8b]"></a>HiLinkGetSysCurTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hilink_mcu.o(i.HiLinkGetSysCurTime))
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkProcessMaxtrixFuncs
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkCommonWaitAck
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkMainProcess
</UL>

<P><STRONG><a name="[8f]"></a>HiLinkInitProfileValue</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, hilink_mcu.o(i.HiLinkInitProfileValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = HiLinkInitProfileValue &rArr; HiLinkUpdateKeyVal &rArr; HiLinkUpdateOneKeyVal &rArr; HiLinkNotifyErrorInfo &rArr; USART1_DEBUG &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkUpdateKeyVal
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkDevInit
</UL>

<P><STRONG><a name="[95]"></a>HiLinkMainProcess</STRONG> (Thumb, 190 bytes, Stack size 160 bytes, hilink_process.o(i.HiLinkMainProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = HiLinkMainProcess &rArr; HiSlipRcvData &rArr; HiLinkGeneralCmdSend &rArr; HiLinkNotifyErrorInfo &rArr; USART1_DEBUG &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkProcessMaxtrixFuncs
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiSlipRcvData
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkGetSysCurTime
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkMcuMain
</UL>

<P><STRONG><a name="[99]"></a>HiLinkMcuMain</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hilink_mcu_main.o(i.HiLinkMcuMain))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = HiLinkMcuMain &rArr; HiLinkMainProcess &rArr; HiSlipRcvData &rArr; HiLinkGeneralCmdSend &rArr; HiLinkNotifyErrorInfo &rArr; USART1_DEBUG &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay10ms
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkModuleReboot
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkMainProcess
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkDevInit
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9a]"></a>HiLinkModuleReboot</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, hilink_process.o(i.HiLinkModuleReboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = HiLinkModuleReboot &rArr; HiLinkGeneralCmdSend &rArr; HiLinkNotifyErrorInfo &rArr; USART1_DEBUG &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkGeneralCmdSend
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkMcuMain
</UL>

<P><STRONG><a name="[8a]"></a>HiLinkNotifyErrorInfo</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hilink_mcu.o(i.HiLinkNotifyErrorInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = HiLinkNotifyErrorInfo &rArr; USART1_DEBUG &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_DEBUG
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkReqRegSvcInfo
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkReqRegKeyMap
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkGeneralParseTlv
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkFillSvcTlvs
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkGeneralCmdSend
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkCmdProcess
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkUpdateWorkMode
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkUpdateOneKeyVal
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkUpdateNetStatus
</UL>

<P><STRONG><a name="[79]"></a>HiLinkNotifyModuleInfo</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hilink_mcu.o(i.HiLinkNotifyModuleInfo))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkAckProcess
</UL>

<P><STRONG><a name="[7d]"></a>HiLinkNotifyUtcTime</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hilink_mcu.o(i.HiLinkNotifyUtcTime))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkAckProcess
</UL>

<P><STRONG><a name="[84]"></a>HiLinkOtaCheckVer</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hilink_ota.o(i.HiLinkOtaCheckVer))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkCmdProcess
</UL>

<P><STRONG><a name="[87]"></a>HiLinkOtaEnd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hilink_ota.o(i.HiLinkOtaEnd))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkCmdProcess
</UL>

<P><STRONG><a name="[86]"></a>HiLinkOtaRcvPkg</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hilink_ota.o(i.HiLinkOtaRcvPkg))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkCmdProcess
</UL>

<P><STRONG><a name="[85]"></a>HiLinkOtaStart</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hilink_ota.o(i.HiLinkOtaStart))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkCmdProcess
</UL>

<P><STRONG><a name="[a3]"></a>HiLinkSetCurWaitAckSeq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hilink_process.o(i.HiLinkSetCurWaitAckSeq))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiSlipSendData
</UL>

<P><STRONG><a name="[ab]"></a>HiLinkUartRcvOneByte</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, hilink_hislip.o(i.HiLinkUartRcvOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HiLinkUartRcvOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[9e]"></a>HiLinkUartSendOneByte</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hilink_mcu.o(i.HiLinkUartSendOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HiLinkUartSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay10ms
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiSlipIoSendData
</UL>

<P><STRONG><a name="[94]"></a>HiLinkUpdateKeyVal</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, hilink_process.o(i.HiLinkUpdateKeyVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = HiLinkUpdateKeyVal &rArr; HiLinkUpdateOneKeyVal &rArr; HiLinkNotifyErrorInfo &rArr; USART1_DEBUG &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkUpdateOneKeyVal
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkInitProfileValue
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchOnCtrlFunc
</UL>

<P><STRONG><a name="[90]"></a>HiSlipFillDataEA</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, hilink_hislip.o(i.HiSlipFillDataEA))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkReqRegSvcInfo
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkReqRegKeyMap
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkFillSvcTlvs
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkGeneralCmdSend
</UL>

<P><STRONG><a name="[8c]"></a>HiSlipGetLastAckInfo</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hilink_hislip.o(i.HiSlipGetLastAckInfo))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkCommonWaitAck
</UL>

<P><STRONG><a name="[8e]"></a>HiSlipInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hilink_hislip.o(i.HiSlipInit))
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiSlipUartInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkDevInit
</UL>

<P><STRONG><a name="[7c]"></a>HiSlipParseDataEA</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, hilink_hislip.o(i.HiSlipParseDataEA))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkParseModuleInfo
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkGeneralParseTlv
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkCmdProcess
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkAckProcess
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkUpdateWorkMode
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkUpdateNetStatus
</UL>

<P><STRONG><a name="[97]"></a>HiSlipRcvData</STRONG> (Thumb, 354 bytes, Stack size 48 bytes, hilink_hislip.o(i.HiSlipRcvData))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = HiSlipRcvData &rArr; HiLinkGeneralCmdSend &rArr; HiLinkNotifyErrorInfo &rArr; USART1_DEBUG &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkGeneralCmdSend
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkMainProcess
</UL>

<P><STRONG><a name="[7e]"></a>HiSlipSendAckMsg</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, hilink_hislip.o(i.HiSlipSendAckMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = HiSlipSendAckMsg &rArr; HiLinkGeneralCmdSend &rArr; HiLinkNotifyErrorInfo &rArr; USART1_DEBUG &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkGeneralCmdSend
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkCmdProcess
</UL>

<P><STRONG><a name="[92]"></a>HiSlipSendData</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, hilink_hislip.o(i.HiSlipSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HiSlipSendData &rArr; HiSlipSendFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkSetCurWaitAckSeq
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiSlipSendFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkGeneralCmdSend
</UL>

<P><STRONG><a name="[a1]"></a>HiSlipUartInit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, hilink_hislip.o(i.HiSlipUartInit))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiSlipInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkUpdateWorkMode
</UL>

<P><STRONG><a name="[14]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f30x_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f30x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f30x_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f30x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[0]"></a>SwitchOnCtrlFunc</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, hilink_device.o(i.SwitchOnCtrlFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = SwitchOnCtrlFunc &rArr; HiLinkUpdateKeyVal &rArr; HiLinkUpdateOneKeyVal &rArr; HiLinkNotifyErrorInfo &rArr; USART1_DEBUG &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_led_on
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_led_off
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_DEBUG
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkUpdateKeyVal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hilink_device.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>SysTick_Handler</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, gd32f30x_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>SystemInit</STRONG> (Thumb, 226 bytes, Stack size 0 bytes, system_gd32f30x.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(.text)
</UL>
<P><STRONG><a name="[34]"></a>TIMER0_UP_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timer.o(i.TIMER0_UP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER0_UP_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_get
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>USART0_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, uart.o(i.USART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART0_IRQHandler &rArr; HiLinkUartRcvOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_clear
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkUartRcvOneByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>USART1_DEBUG</STRONG> (Thumb, 80 bytes, Stack size 240 bytes, uart.o(i.USART1_DEBUG))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = USART1_DEBUG &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkNotifyErrorInfo
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WakeupTimeTimeCtrlFunc
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchOnCtrlFunc
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FadeTimeTimeCtrlFunc
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonExecution1ActionCtrlFunc
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BrightnessBrightnessCtrlFunc
</UL>

<P><STRONG><a name="[16]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f30x_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>WakeupTimeTimeCtrlFunc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hilink_device.o(i.WakeupTimeTimeCtrlFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = WakeupTimeTimeCtrlFunc &rArr; USART1_DEBUG &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_DEBUG
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hilink_device.o(.data)
</UL>
<P><STRONG><a name="[ae]"></a>__0printf$bare</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, printfb.o(i.__0printf$bare), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[df]"></a>__1printf$bare</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfb.o(i.__0printf$bare), UNUSED)

<P><STRONG><a name="[75]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfb.o(i.__0printf$bare))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI10_15_IRQHandler
</UL>

<P><STRONG><a name="[b0]"></a>__0vsnprintf</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e0]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[e1]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[ac]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __c89vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_DEBUG
</UL>

<P><STRONG><a name="[e2]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[e3]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[e4]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[e5]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[9b]"></a>delay10ms</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, systick.o(i.delay10ms))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkMcuMain
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkUartSendOneByte
</UL>

<P><STRONG><a name="[c2]"></a>exti_init</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, gd32f30x_exti.o(i.exti_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = exti_init
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_key_init
</UL>

<P><STRONG><a name="[76]"></a>exti_interrupt_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f30x_exti.o(i.exti_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_key_init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI10_15_IRQHandler
</UL>

<P><STRONG><a name="[73]"></a>exti_interrupt_flag_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f30x_exti.o(i.exti_interrupt_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI10_15_IRQHandler
</UL>

<P><STRONG><a name="[5e]"></a>fputc</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, main.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfb.o(i.__0printf$bare)
</UL>
<P><STRONG><a name="[83]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkFreeModuleInfo
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkCmdProcess
</UL>

<P><STRONG><a name="[b7]"></a>gd_eval_com_init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, uart.o(i.gd_eval_com_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gd_eval_com_init &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_uart_init
</UL>

<P><STRONG><a name="[bf]"></a>gd_eval_key_init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, key.o(i.gd_eval_key_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = gd_eval_key_init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_exti_source_select
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_key_init
</UL>

<P><STRONG><a name="[c3]"></a>gd_eval_led_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, led.o(i.gd_eval_led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = gd_eval_led_init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_led_init
</UL>

<P><STRONG><a name="[a4]"></a>gd_eval_led_off</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, led.o(i.gd_eval_led_off))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchOnCtrlFunc
</UL>

<P><STRONG><a name="[a5]"></a>gd_eval_led_on</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, led.o(i.gd_eval_led_on))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchOnCtrlFunc
</UL>

<P><STRONG><a name="[74]"></a>gd_eval_led_toggle</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, led.o(i.gd_eval_led_toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gd_eval_led_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI10_15_IRQHandler
</UL>

<P><STRONG><a name="[c5]"></a>gpio_bit_write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_gpio.o(i.gpio_bit_write))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_led_toggle
</UL>

<P><STRONG><a name="[c1]"></a>gpio_exti_source_select</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, gd32f30x_gpio.o(i.gpio_exti_source_select))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_key_init
</UL>

<P><STRONG><a name="[b9]"></a>gpio_init</STRONG> (Thumb, 152 bytes, Stack size 20 bytes, gd32f30x_gpio.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_key_init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_led_init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[c4]"></a>gpio_input_bit_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_gpio.o(i.gpio_input_bit_get))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_led_toggle
</UL>

<P><STRONG><a name="[57]"></a>main</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = main &rArr; HiLinkMcuMain &rArr; HiLinkMainProcess &rArr; HiSlipRcvData &rArr; HiLinkGeneralCmdSend &rArr; HiLinkNotifyErrorInfo &rArr; USART1_DEBUG &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_uart_init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_led_init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_key_init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_DEBUG
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkMcuMain
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[82]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkParseModuleInfo
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkCmdProcess
</UL>

<P><STRONG><a name="[c0]"></a>nvic_irq_enable</STRONG> (Thumb, 160 bytes, Stack size 12 bytes, gd32f30x_misc.o(i.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_key_init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_uart_init
</UL>

<P><STRONG><a name="[ca]"></a>rcu_clock_freq_get</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, gd32f30x_rcu.o(i.rcu_clock_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>

<P><STRONG><a name="[b8]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f30x_rcu.o(i.rcu_periph_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_key_init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_led_init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[cc]"></a>rcu_periph_reset_disable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32f30x_rcu.o(i.rcu_periph_reset_disable))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
</UL>

<P><STRONG><a name="[cb]"></a>rcu_periph_reset_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f30x_rcu.o(i.rcu_periph_reset_enable))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
</UL>

<P><STRONG><a name="[c6]"></a>systick_config</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, systick.o(i.systick_config))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a7]"></a>timer_interrupt_flag_clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_UP_IRQHandler
</UL>

<P><STRONG><a name="[a6]"></a>timer_interrupt_flag_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_interrupt_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_UP_IRQHandler
</UL>

<P><STRONG><a name="[bb]"></a>usart_baudrate_set</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, gd32f30x_usart.o(i.usart_baudrate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[aa]"></a>usart_data_receive</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[9f]"></a>usart_data_transmit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_DEBUG
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkUartSendOneByte
</UL>

<P><STRONG><a name="[ba]"></a>usart_deinit</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, gd32f30x_usart.o(i.usart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[be]"></a>usart_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_enable))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[ad]"></a>usart_flag_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_DEBUG
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[cd]"></a>usart_interrupt_enable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_uart_init
</UL>

<P><STRONG><a name="[a9]"></a>usart_interrupt_flag_clear</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[a8]"></a>usart_interrupt_flag_get</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_interrupt_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[bc]"></a>usart_receive_config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_receive_config))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[bd]"></a>usart_transmit_config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f30x_usart.o(i.usart_transmit_config))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[c8]"></a>user_key_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, key.o(i.user_key_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = user_key_init &rArr; gd_eval_key_init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_key_init
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c7]"></a>user_led_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, led.o(i.user_led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = user_led_init &rArr; gd_eval_led_init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_led_init
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>user_uart_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, uart.o(i.user_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = user_uart_init &rArr; gd_eval_com_init &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5b]"></a>HiSlipIoRcvData</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, hilink_hislip.o(i.HiSlipIoRcvData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HiSlipIoRcvData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hilink_hislip.o(i.HiSlipInit)
</UL>
<P><STRONG><a name="[5a]"></a>HiSlipIoSendData</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, hilink_hislip.o(i.HiSlipIoSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HiSlipIoSendData &rArr; HiLinkUartSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkUartSendOneByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hilink_hislip.o(i.HiSlipInit)
</UL>
<P><STRONG><a name="[a2]"></a>HiSlipSendFrame</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, hilink_hislip.o(i.HiSlipSendFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HiSlipSendFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiSlipSendData
</UL>

<P><STRONG><a name="[6]"></a>HiLinkCommonWaitAck</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, hilink_process.o(i.HiLinkCommonWaitAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HiLinkCommonWaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiSlipGetLastAckInfo
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkGetSysCurTime
</UL>
<BR>[Address Reference Count : 5]<UL><LI> hilink_process.o(.data)
<LI> hilink_process.o(.data)
<LI> hilink_process.o(.data)
<LI> hilink_process.o(.data)
<LI> hilink_process.o(.data)
</UL>
<P><STRONG><a name="[88]"></a>HiLinkFillSvcTlvs</STRONG> (Thumb, 400 bytes, Stack size 72 bytes, hilink_process.o(i.HiLinkFillSvcTlvs))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = HiLinkFillSvcTlvs &rArr; HiLinkNotifyErrorInfo &rArr; USART1_DEBUG &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkGetProfileInfoList
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiSlipFillDataEA
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkNotifyErrorInfo
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkReportSvcKeyVals
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkReportProfileVals
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkCmdProcess
</UL>

<P><STRONG><a name="[7a]"></a>HiLinkFreeModuleInfo</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, hilink_process.o(i.HiLinkFreeModuleInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HiLinkFreeModuleInfo &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkParseModuleInfo
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkAckProcess
</UL>

<P><STRONG><a name="[80]"></a>HiLinkGeneralParseTlv</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, hilink_process.o(i.HiLinkGeneralParseTlv))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = HiLinkGeneralParseTlv &rArr; HiLinkNotifyErrorInfo &rArr; USART1_DEBUG &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiSlipParseDataEA
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkNotifyErrorInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkCmdProcess
</UL>

<P><STRONG><a name="[81]"></a>HiLinkGetProfileInfoList</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, hilink_process.o(i.HiLinkGetProfileInfoList))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkReqRegSvcInfo
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkReqRegKeyMap
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkReportProfileVals
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkReportInitVals
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkFillSvcTlvs
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkCmdProcess
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkUpdateOneKeyVal
</UL>

<P><STRONG><a name="[78]"></a>HiLinkParseModuleInfo</STRONG> (Thumb, 608 bytes, Stack size 48 bytes, hilink_process.o(i.HiLinkParseModuleInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HiLinkParseModuleInfo &rArr; HiLinkFreeModuleInfo &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkFreeModuleInfo
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiSlipParseDataEA
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkAckProcess
</UL>

<P><STRONG><a name="[98]"></a>HiLinkProcessMaxtrixFuncs</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, hilink_process.o(i.HiLinkProcessMaxtrixFuncs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HiLinkProcessMaxtrixFuncs
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkGetSysCurTime
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkMainProcess
</UL>

<P><STRONG><a name="[f]"></a>HiLinkReportInitVals</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, hilink_process.o(i.HiLinkReportInitVals))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = HiLinkReportInitVals &rArr; HiLinkReportSvcKeyVals &rArr; HiLinkFillSvcTlvs &rArr; HiLinkNotifyErrorInfo &rArr; USART1_DEBUG &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkReportSvcKeyVals
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkGetProfileInfoList
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hilink_process.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>HiLinkReportProfileVals</STRONG> (Thumb, 336 bytes, Stack size 40 bytes, hilink_process.o(i.HiLinkReportProfileVals))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = HiLinkReportProfileVals &rArr; HiLinkReportSvcKeyVals &rArr; HiLinkFillSvcTlvs &rArr; HiLinkNotifyErrorInfo &rArr; USART1_DEBUG &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkReportSvcKeyVals
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkGetProfileInfoList
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkFillSvcTlvs
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkGeneralCmdSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hilink_process.o(.data)
</UL>
<P><STRONG><a name="[9c]"></a>HiLinkReportSvcKeyVals</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, hilink_process.o(i.HiLinkReportSvcKeyVals))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = HiLinkReportSvcKeyVals &rArr; HiLinkFillSvcTlvs &rArr; HiLinkNotifyErrorInfo &rArr; USART1_DEBUG &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkFillSvcTlvs
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkGeneralCmdSend
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkReportProfileVals
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkReportInitVals
</UL>

<P><STRONG><a name="[7]"></a>HiLinkReqGetNetStatus</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hilink_process.o(i.HiLinkReqGetNetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = HiLinkReqGetNetStatus &rArr; HiLinkGeneralCmdSend &rArr; HiLinkNotifyErrorInfo &rArr; USART1_DEBUG &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkGeneralCmdSend
</UL>
<BR>[Address Reference Count : 3]<UL><LI> hilink_process.o(.data)
<LI> hilink_process.o(.data)
<LI> hilink_process.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>HiLinkReqGetWorkMode</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hilink_process.o(i.HiLinkReqGetWorkMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = HiLinkReqGetWorkMode &rArr; HiLinkGeneralCmdSend &rArr; HiLinkNotifyErrorInfo &rArr; USART1_DEBUG &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkGeneralCmdSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hilink_process.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>HiLinkReqRegAcBi</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, hilink_process.o(i.HiLinkReqRegAcBi))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = HiLinkReqRegAcBi &rArr; HiLinkGeneralCmdSend &rArr; HiLinkNotifyErrorInfo &rArr; USART1_DEBUG &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkGeneralCmdSend
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hilink_process.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>HiLinkReqRegDevInfo</STRONG> (Thumb, 256 bytes, Stack size 120 bytes, hilink_process.o(i.HiLinkReqRegDevInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = HiLinkReqRegDevInfo &rArr; HiLinkGeneralCmdSend &rArr; HiLinkNotifyErrorInfo &rArr; USART1_DEBUG &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkGeneralCmdSend
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkGetDeviceSn
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hilink_process.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>HiLinkReqRegEnd</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, hilink_process.o(i.HiLinkReqRegEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = HiLinkReqRegEnd &rArr; HiLinkGeneralCmdSend &rArr; HiLinkNotifyErrorInfo &rArr; USART1_DEBUG &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkGeneralCmdSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hilink_process.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>HiLinkReqRegKeyMap</STRONG> (Thumb, 330 bytes, Stack size 56 bytes, hilink_process.o(i.HiLinkReqRegKeyMap))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = HiLinkReqRegKeyMap &rArr; HiLinkGeneralCmdSend &rArr; HiLinkNotifyErrorInfo &rArr; USART1_DEBUG &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkGetProfileInfoList
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkGeneralCmdSend
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiSlipFillDataEA
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkNotifyErrorInfo
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hilink_process.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>HiLinkReqRegStart</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, hilink_process.o(i.HiLinkReqRegStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = HiLinkReqRegStart &rArr; HiLinkGeneralCmdSend &rArr; HiLinkNotifyErrorInfo &rArr; USART1_DEBUG &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkGeneralCmdSend
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hilink_process.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>HiLinkReqRegSvcInfo</STRONG> (Thumb, 302 bytes, Stack size 56 bytes, hilink_process.o(i.HiLinkReqRegSvcInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = HiLinkReqRegSvcInfo &rArr; HiLinkGeneralCmdSend &rArr; HiLinkNotifyErrorInfo &rArr; USART1_DEBUG &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkGetProfileInfoList
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkGeneralCmdSend
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiSlipFillDataEA
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkNotifyErrorInfo
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hilink_process.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>HiLinkSetWorkMode</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, hilink_process.o(i.HiLinkSetWorkMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = HiLinkSetWorkMode &rArr; HiLinkGeneralCmdSend &rArr; HiLinkNotifyErrorInfo &rArr; USART1_DEBUG &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkGeneralCmdSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hilink_process.o(.data)
</UL>
<P><STRONG><a name="[77]"></a>HiLinkUpdateNetStatus</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, hilink_process.o(i.HiLinkUpdateNetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = HiLinkUpdateNetStatus &rArr; HiLinkNotifyErrorInfo &rArr; USART1_DEBUG &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiSlipParseDataEA
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkNotifyErrorInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkCmdProcess
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkAckProcess
</UL>

<P><STRONG><a name="[a0]"></a>HiLinkUpdateOneKeyVal</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, hilink_process.o(i.HiLinkUpdateOneKeyVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = HiLinkUpdateOneKeyVal &rArr; HiLinkNotifyErrorInfo &rArr; USART1_DEBUG &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkGetProfileInfoList
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkNotifyErrorInfo
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkUpdateKeyVal
</UL>

<P><STRONG><a name="[7b]"></a>HiLinkUpdateWorkMode</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, hilink_process.o(i.HiLinkUpdateWorkMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = HiLinkUpdateWorkMode &rArr; HiLinkNotifyErrorInfo &rArr; USART1_DEBUG &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiSlipUartInit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiSlipParseDataEA
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkNotifyErrorInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkCmdProcess
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HiLinkAckProcess
</UL>

<P><STRONG><a name="[af]"></a>_printf_core</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfb.o(i._printf_core), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$bare
</UL>

<P><STRONG><a name="[b2]"></a>_fp_digits</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b1]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
</UL>

<P><STRONG><a name="[b5]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b4]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5f]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
